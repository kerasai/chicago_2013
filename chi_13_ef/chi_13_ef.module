<?php

/**
 * @file
 * Chicago 2013 Extra Fields module code.
 */

/**
 * Implements hook_field_extra_fields().
 *
 * https://api.drupal.org/api/drupal/modules!field!field.api.php/function/hook_field_extra_fields/7
 */
function chi_13_ef_field_extra_fields() {

  // Specify the entity_type and bundle. This can be done dynamically in order
  // to facilite configuration via an admin screen.
  //
  // 'display' elements are rendered with the entity, 'form' elements appear on
  // the form. Prefixed
  //
  // We assume there is an "issue" node type configured.
  $extra['node']['issue']['display']['chi_13_update'] = array(
    'label' => t('Update prompt'),
    'description' => t('Simple version of an update prompt.'),
    'weight' => 0,
  );

  $extra['node']['issue']['display']['chi_13_update_adv'] = array(
    'label' => t('Update prompt (Advanced)'),
    'description' => t('A more-complicated version of an update prompt.'),
    'weight' => 0,
  );

  return $extra;
}

/**
 * Implements hook_entity_view().
 *
 * Add our elements into the $entity->content render array.
 */
function chi_13_ef_entity_view($entity, $type, $view_mode, $langcode) {
  // Standard way to determine details about an entity.
  list($id, $vid, $bundle) = entity_extract_ids($type, $entity);

  // Only add these elements on entity/bundle combinations that we're expected
  // to appear on. Otherwise the element will display in the content and will
  // not be configureable via the manage display screens.
  if ($type == 'node' && $bundle == 'issue') {
    $uri = entity_uri($type, $entity);
    $entity->content['chi_13_update'] = array(
      '#markup' => l(t('Update this issue'), $uri['path'] . '/update')
    );
    $entity->content['chi_13_update_adv'] = array(
      '#theme' => 'chi_13_update_adv',
      '#entity' => $entity,
      '#entity_type' => $type,
    );
  }
}

/**
 * Implements hook_theme().
 */
function chi_13_ef_theme() {
  return array(
    'chi_13_update_adv' => array(
      'variables' => array('entity' => NULL, 'entity_type' => ''),
      'template' => 'chi_13_update_adv',
    ),
  );
}

/**
 * Set up variables for use in chi_13_update_adv template.
 */
function template_preprocess_chi_13_update_adv(&$vars) {
  // Grab the entity's label (node title) for use in creating the $text
  // variable.
  $args = array(
    '@title' => check_plain(entity_label($vars['entity_type'], $vars['entity']))
  );
  $vars['text'] = t('Update @title', $args);

  // Create a link to the entity's update page.
  $uri = entity_uri($vars['entity_type'], $vars['entity']);
  $vars['link'] = l(t('Click here'), $uri['path'] . '/update');

  // Determine if the entity is old. Going with 10 seconds as the threshold,
  // just so we can see stuff age rapidly.
  // 
  // This is hard-coded to nodes, as it's specifically looking for the changed
  // property.
  $vars['aging'] = (REQUEST_TIME > $vars['entity']->changed + 10);
}

/**
 * Implements hook_menu().
 */
function chi_13_ef_menu() {

  // A simple page used to update the node.
  $items['node/%node/update'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Update',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('chi_13_ef_update_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'chi_13_ef.pages.inc',
  );

  return $items;
}
